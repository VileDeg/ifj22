--------------------File contents: --------------------

<?php
declare(strict_types=1);
$data = "";
$ptr = 0;
$program = reads();
$program_length = strlen($program);
$pc = 0;

function setData(string $data, int $ptr, int $value) : string {
    $dataLen = strlen($data);
    $data1 = ssubstr($data, 0, $ptr);
    $ptrCont = $ptr + 1;
    $data2 = ssubstr($data, $ptrCont, $dataLen);
    $chr = chr($value);
    $out = $data1 . $chr . $data2;
    return $out;
}

function ssubstr(string $str, int $start, int $end) : string {
    $out = substring($str, $start, $end);
    if($out !== null) {
        return $out;
    } else {
        return "";
    }
}

while($pc<$program_length) {
    $pcPlusOne = $pc + 1;
    $c = ssubstr($program, $pc, $pcPlusOne);
    if($c) {} else {$c=chr(0);}
    if($c==="+") {
        $ptrPlusOne = $ptr + 1;
        $oldByte = ssubstr($data, $ptr, $ptrPlusOne);
        $newByte = ord($oldByte);
        $newByte = $newByte + 1;
        if($newByte>255) {$newByte=0;} else {}
        if($newByte<0) {$newByte=255;} else {}
        $data = setData($data, $ptr, $newByte);
    } else {
        if($c==="-") {
            $ptrPlusOne = $ptr + 1;
            $oldByte = ssubstr($data, $ptr, $ptrPlusOne);
            $newByte = ord($oldByte);
            $newByte = $newByte - 1;
            if($newByte>255) {$newByte=0;} else {}
            if($newByte<0) {$newByte=255;} else {}
            $data = setData($data, $ptr, $newByte);
        } else {
            if($c===">") {
                $ptr = $ptr + 1;
            } else {
                if($c==="<") {
                    $ptr = $ptr - 1;
                } else {
                    if($c===".") {
                        $ptrPlusOne = $ptr + 1;
                        $out = ssubstr($data, $ptr, $ptrPlusOne);
                        write($out);
                    } else {
                        if($c==="[") {
                            $ptrPlusOne = $ptr + 1;
                            $oldByte = ssubstr($data, $ptr, $ptrPlusOne);
                            $newByte = ord($oldByte);
                            if($newByte===0) {
                                $pc = $pc + 1;
                                $nesting = 1;
                                while($nesting>0) {
                                    $pcPlusOne = $pc + 1;
                                    $c = ssubstr($program, $pc, $pcPlusOne);
                                    if($c) {} else {$c=chr(0);}
                                    if($c==="[") {
                                        $nesting = $nesting + 1;
                                    } else {
                                        if($c==="]") {
                                            $nesting = $nesting - 1;
                                        } else {}
                                    }
                                    $pc = $pc + 1;
                                }
                            } else {}
                        } else {
                            if($c==="]") {
                                $ptrPlusOne = $ptr + 1;
                                $oldByte = ssubstr($data, $ptr, $ptrPlusOne);
                                $newByte = ord($oldByte);
                                if($newByte===0) {
                                } else {
                                    $pc = $pc - 1;
                                    $nesting = 1;
                                    while($nesting>0) {
                                        $pcPlusOne = $pc + 1;
                                        $c = ssubstr($program, $pc, $pcPlusOne);
                                        if($c) {} else {$c=chr(0);}
                                        if($c==="[") {
                                            $nesting = $nesting - 1;
                                        } else {
                                            if($c==="]") {
                                                $nesting = $nesting + 1;
                                            } else {}
                                        }
                                        $pc = $pc - 1;
                                    }
                                }
                            } else {}
                        }
                    }
                }
            }
        }
    }
    $pc = $pc + 1;
}


--------------------Rules triggered: --------------------

Current token:                        string       keyword         
params -> <type> $ID <param_n>
Current token:                        string       keyword         
type -> string
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     right_bracket   
param_n -> , <params>
Current token:                        string       keyword         
func_type -> <type>
Current token:                        string       keyword         
type -> string
Current token:                        string       keyword         
params -> <type> $ID <param_n>
Current token:                        string       keyword         
type -> string
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     right_bracket   
param_n -> , <params>
Current token:                        string       keyword         
func_type -> <type>
Current token:                        string       keyword         
type -> string
Current token:                                     EOF             
begin -> <?php declare ( strict_types = 1 ) ; <program> <end>
Current token:           $data                     ID              
program -> <statement>
Current token:           $data                     ID              
statement -> $ID = <rvalue> ; <program>
Current token:                                     string          
rvalue -> ID ( <args> )
Current token:           $ptr                      ID              
program -> <statement>
Current token:           $ptr                      ID              
statement -> $ID = <rvalue> ; <program>
Current token: 0                                   integer         
rvalue -> ID ( <args> )
Current token:           $program                  ID              
program -> <statement>
Current token:           $program                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           reads                     ID              
rvalue -> $ID
Current token:                                     right_bracket   
args -> ε
Current token:           $program_len              ID              
program -> <statement>
Current token:           $program_len              ID              
statement -> $ID = <rvalue> ; <program>
Current token:           strlen                    ID              
rvalue -> $ID
Current token:           $program                  ID              
args -> <term> <arg_n>
Current token:           $program                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $pc                       ID              
program -> <statement>
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token: 0                                   integer         
rvalue -> ID ( <args> )
Current token:                        function     keyword         
program -> function ID ( <params> ) : <func_type> { <statement> } <program>
Current token:                        string       keyword         
params -> <type> $ID <param_n>
Current token:                        string       keyword         
type -> string
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     right_bracket   
param_n -> , <params>
Current token:                        string       keyword         
func_type -> <type>
Current token:                        string       keyword         
type -> string
Current token:           $dataLen                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           strlen                    ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $data1                    ID              
program -> <statement>
Current token:           $data1                    ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token: 0                                   integer         
term -> INT_LITERAL
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $ptrCont                  ID              
program -> <statement>
Current token:           $ptrCont                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $data2                    ID              
program -> <statement>
Current token:           $data2                    ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrCont                  ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $dataLen                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $chr                      ID              
program -> <statement>
Current token:           $chr                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           chr                       ID              
rvalue -> $ID
Current token:           $value                    ID              
args -> <term> <arg_n>
Current token:           $value                    ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $out                      ID              
program -> <statement>
Current token:           $out                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $data1                    ID              
rvalue -> ID ( <args> )
Current token:                        return       keyword         
program -> <statement>
Current token:                        return       keyword         
statement -> return <expression> ; <program>
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        function     keyword         
program -> function ID ( <params> ) : <func_type> { <statement> } <program>
Current token:                        string       keyword         
params -> <type> $ID <param_n>
Current token:                        string       keyword         
type -> string
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     comma           
param_n -> , <params>
Current token:                        int          keyword         
type -> int
Current token:                                     right_bracket   
param_n -> , <params>
Current token:                        string       keyword         
func_type -> <type>
Current token:                        string       keyword         
type -> string
Current token:           $out                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           substring                 ID              
rvalue -> $ID
Current token:           $str                      ID              
args -> <term> <arg_n>
Current token:           $str                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $start                    ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $end                      ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:                        return       keyword         
statement -> return <expression> ; <program>
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        return       keyword         
statement -> return <expression> ; <program>
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        while        keyword         
program -> <statement>
Current token:                        while        keyword         
statement -> while ( <expression> ) { <statement> } <program>
Current token:           $pcPlusOne                ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:           $c                        ID              
program -> <statement>
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $program                  ID              
args -> <term> <arg_n>
Current token:           $program                  ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pc                       ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pcPlusOne                ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           chr                       ID              
rvalue -> $ID
Current token: 0                                   integer         
args -> <term> <arg_n>
Current token: 0                                   integer         
term -> INT_LITERAL
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptrPlusOne               ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $oldByte                  ID              
program -> <statement>
Current token:           $oldByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrPlusOne               ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ord                       ID              
rvalue -> $ID
Current token:           $oldByte                  ID              
args -> <term> <arg_n>
Current token:           $oldByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $newByte                  ID              
rvalue -> ID ( <args> )
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 0                                   integer         
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 255                                 integer         
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:           $data                     ID              
program -> <statement>
Current token:           $data                     ID              
statement -> $ID = <rvalue> ; <program>
Current token:           setData                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $newByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptrPlusOne               ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $oldByte                  ID              
program -> <statement>
Current token:           $oldByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrPlusOne               ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ord                       ID              
rvalue -> $ID
Current token:           $oldByte                  ID              
args -> <term> <arg_n>
Current token:           $oldByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $newByte                  ID              
rvalue -> ID ( <args> )
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 0                                   integer         
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 255                                 integer         
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:           $data                     ID              
program -> <statement>
Current token:           $data                     ID              
statement -> $ID = <rvalue> ; <program>
Current token:           setData                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $newByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptr                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptr                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptrPlusOne               ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $out                      ID              
program -> <statement>
Current token:           $out                      ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrPlusOne               ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           write                     ID              
program -> <statement>
Current token:           write                     ID              
statement -> <rvalue> ; <program>
Current token:           write                     ID              
rvalue -> $ID
Current token:           $out                      ID              
args -> <term> <arg_n>
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptrPlusOne               ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $oldByte                  ID              
program -> <statement>
Current token:           $oldByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrPlusOne               ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ord                       ID              
rvalue -> $ID
Current token:           $oldByte                  ID              
args -> <term> <arg_n>
Current token:           $oldByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:           $nesting                  ID              
program -> <statement>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 1                                   integer         
rvalue -> ID ( <args> )
Current token:                        while        keyword         
program -> <statement>
Current token:                        while        keyword         
statement -> while ( <expression> ) { <statement> } <program>
Current token:           $pcPlusOne                ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:           $c                        ID              
program -> <statement>
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $program                  ID              
args -> <term> <arg_n>
Current token:           $program                  ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pc                       ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pcPlusOne                ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           chr                       ID              
rvalue -> $ID
Current token: 0                                   integer         
args -> <term> <arg_n>
Current token: 0                                   integer         
term -> INT_LITERAL
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $nesting                  ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $nesting                  ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $pc                       ID              
program -> <statement>
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $ptrPlusOne               ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $ptr                      ID              
rvalue -> ID ( <args> )
Current token:           $oldByte                  ID              
program -> <statement>
Current token:           $oldByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $data                     ID              
args -> <term> <arg_n>
Current token:           $data                     ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptr                      ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $ptrPlusOne               ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:           $newByte                  ID              
program -> <statement>
Current token:           $newByte                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ord                       ID              
rvalue -> $ID
Current token:           $oldByte                  ID              
args -> <term> <arg_n>
Current token:           $oldByte                  ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:           $nesting                  ID              
program -> <statement>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token: 1                                   integer         
rvalue -> ID ( <args> )
Current token:                        while        keyword         
program -> <statement>
Current token:                        while        keyword         
statement -> while ( <expression> ) { <statement> } <program>
Current token:           $pcPlusOne                ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:           $c                        ID              
program -> <statement>
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           ssubstr                   ID              
rvalue -> $ID
Current token:           $program                  ID              
args -> <term> <arg_n>
Current token:           $program                  ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pc                       ID              
term -> $ID
Current token:                                     comma           
arg_n -> , <args>
Current token:           $pcPlusOne                ID              
term -> $ID
Current token:                                     right_bracket   
arg_n -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $c                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           chr                       ID              
rvalue -> $ID
Current token: 0                                   integer         
args -> <term> <arg_n>
Current token: 0                                   integer         
term -> INT_LITERAL
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $nesting                  ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           $nesting                  ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $nesting                  ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $pc                       ID              
program -> <statement>
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $pc                       ID              
program -> <statement>
Current token:           $pc                       ID              
statement -> $ID = <rvalue> ; <program>
Current token:           $pc                       ID              
rvalue -> ID ( <args> )
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     EOF             
program -> <statement>
Current token:                                     EOF             
statement -> ε
Current token:                                     EOF             
end -> EOF


