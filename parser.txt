--------------------File contents: --------------------

<?php
declare(strict_types=1);
function f() : void {
  return;
}
$x = f();
if($x !== null) {
  write("NOT NULL\n");
} else {
  write("NULL\n");
}


--------------------Rules triggered: --------------------

Current token:                                     prolog          
begin -> <?php declare ( strict_types = 1 ) ; <program> <end>
Current token:                        function     keyword         
program -> function ID ( <params> ) : <func_type> { <statement> } <program>
Current token:                                     right_bracket   
params -> ε
Current token:                        void         keyword         
func_type -> void
Current token:                        return       keyword         
statement -> return <expression> ; <program>
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:           $x                        ID              
program -> <statement>
Current token:           $x                        ID              
statement -> $ID = <rvalue> ; <program>
Current token:           f                         ID              
rvalue -> $ID
Current token:                                     right_bracket   
args -> ε
Current token:                        if           keyword         
program -> <statement>
Current token:                        if           keyword         
statement -> if ( <expression> ) { <statement> } else { <statement> } <program>
Current token:           write                     ID              
statement -> <rvalue> ; <program>
Current token:           write                     ID              
rvalue -> $ID
Current token:           NOT NULL
                 string          
args -> <term> <arg_n>
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:           write                     ID              
statement -> <rvalue> ; <program>
Current token:           write                     ID              
rvalue -> $ID
Current token:           NULL
                     string          
args -> <term> <arg_n>
Current token:                                     right_bracket   
arg_n -> ε
Current token:                                     right_curly_brac
program -> <statement>
Current token:                                     right_curly_brac
statement -> ε
Current token:                                     EOF             
program -> <statement>
Current token:                                     EOF             
statement -> ε
Current token:                                     EOF             
end -> EOF


